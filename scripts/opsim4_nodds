#!/usr/bin/env python
from __future__ import division
from datetime import datetime
import logging
import logging.handlers
import os
import subprocess as sp
import time

from lsst.sims.ocs.configuration import SimulationConfig
from lsst.sims.ocs.database import SocsDatabase
from lsst.sims.ocs.kernel import SimulatorNoDDS
from lsst.sims.ocs.setup import create_parser, configure_logging, generate_logfile_path
from lsst.sims.ocs.setup import apply_file_config, read_file_config, set_log_levels, Tracking
from lsst.sims.ocs.setup import LoggingLevel
from lsst.sims.ocs.utilities import expand_path
from lsst.sims.ocs.setup.log import DETAIL_LEVEL
from lsst.ts.scheduler import Driver

from SALPY_scheduler import (scheduler_generalPropConfigC, scheduler_sequencePropConfigC, scheduler_driverConfigC,
                             scheduler_obsSiteConfigC, scheduler_telescopeConfigC, scheduler_domeConfigC,
                             scheduler_rotatorConfigC, scheduler_cameraConfigC, scheduler_slewConfigC,
                             scheduler_opticsLoopCorrConfigC, scheduler_parkConfigC)

def make_park_config(park_config):
    topic_park_config = park_config

    confdict = {}
    confdict["park"] = {}
    confdict["park"]["telescope_altitude"] = topic_park_config.telescope_altitude
    confdict["park"]["telescope_azimuth"] = topic_park_config.telescope_azimuth
    confdict["park"]["telescope_rotator"] = topic_park_config.telescope_rotator
    confdict["park"]["dome_altitude"] = topic_park_config.dome_altitude
    confdict["park"]["dome_azimuth"] = topic_park_config.dome_azimuth
    confdict["park"]["filter_position"] = topic_park_config.filter_position

    return confdict


def make_optics_config(optics_config):
    topic_optics_config = optics_config

    tel_optics_cl_alt_limit = []
    for k in range(3):
        tel_optics_cl_alt_limit.append(topic_optics_config.tel_optics_cl_alt_limit[k])
    tel_optics_cl_delay = []
    for k in range(2):
        tel_optics_cl_delay.append(topic_optics_config.tel_optics_cl_delay[k])

    confdict = {}
    confdict["optics_loop_corr"] = {}
    confdict["optics_loop_corr"]["tel_optics_ol_slope"] = topic_optics_config.tel_optics_ol_slope
    confdict["optics_loop_corr"]["tel_optics_cl_alt_limit"] = tel_optics_cl_alt_limit
    confdict["optics_loop_corr"]["tel_optics_cl_delay"] = tel_optics_cl_delay

    return confdict


def make_slew_config(slew_config):
    topic_slew_config = slew_config

    confdict = {}
    confdict["slew"] = {}

    def list2str(l):
        s = ''
        if len(l) > 1:
            for val in l[:-1]:
                s += str(val)
                s += ','
            s += str(l[-1])
        elif len(l) == 1:
            s = str(l[0])

        return s

    prereq_str = list2str(topic_slew_config.prereq_domalt)
    if prereq_str != "":
        confdict["slew"]["prereq_domalt"] = prereq_str.split(",")
    else:
        confdict["slew"]["prereq_domalt"] = []

    prereq_str = list2str(topic_slew_config.prereq_domaz)
    if prereq_str != "":
        confdict["slew"]["prereq_domaz"] = prereq_str.split(",")
    else:
        confdict["slew"]["prereq_domaz"] = []

    prereq_str = list2str(topic_slew_config.prereq_domazsettle)
    if prereq_str != "":
        print(prereq_str)
        confdict["slew"]["prereq_domazsettle"] = prereq_str.split(",")
    else:
        confdict["slew"]["prereq_domazsettle"] = []

    prereq_str = list2str(topic_slew_config.prereq_telalt)
    if prereq_str != "":
        confdict["slew"]["prereq_telalt"] = prereq_str.split(",")
    else:
        confdict["slew"]["prereq_telalt"] = []

    prereq_str = list2str(topic_slew_config.prereq_telaz)
    if prereq_str != "":
        confdict["slew"]["prereq_telaz"] = prereq_str.split(",")
    else:
        confdict["slew"]["prereq_telaz"] = []

    prereq_str = list2str(topic_slew_config.prereq_telopticsopenloop)
    if prereq_str != "":
        confdict["slew"]["prereq_telopticsopenloop"] = prereq_str.split(",")
    else:
        confdict["slew"]["prereq_telopticsopenloop"] = []

    prereq_str = list2str(topic_slew_config.prereq_telopticsclosedloop)
    if prereq_str != "":
        confdict["slew"]["prereq_telopticsclosedloop"] = prereq_str.split(",")
    else:
        confdict["slew"]["prereq_telopticsclosedloop"] = []

    prereq_str = list2str(topic_slew_config.prereq_telsettle)
    if prereq_str != "":
        confdict["slew"]["prereq_telsettle"] = prereq_str.split(",")
    else:
        confdict["slew"]["prereq_telsettle"] = []

    prereq_str = list2str(topic_slew_config.prereq_telrot)
    if prereq_str != "":
        confdict["slew"]["prereq_telrot"] = prereq_str.split(",")
    else:
        confdict["slew"]["prereq_telrot"] = []

    prereq_str = list2str(topic_slew_config.prereq_filter)
    if prereq_str != "":
        confdict["slew"]["prereq_filter"] = prereq_str.split(",")
    else:
        confdict["slew"]["prereq_filter"] = []

    prereq_str = list2str(topic_slew_config.prereq_exposures)
    if prereq_str != "":
        confdict["slew"]["prereq_exposures"] = prereq_str.split(",")
    else:
        confdict["slew"]["prereq_exposures"] = []

    prereq_str = list2str(topic_slew_config.prereq_readout)
    if prereq_str != "":
        confdict["slew"]["prereq_readout"] = prereq_str.split(",")
    else:
        confdict["slew"]["prereq_readout"] = []
    return confdict


def make_camera_config(camera_config):

    topic_camera_config = camera_config

    confdict = {}
    confdict["camera"] = {}
    confdict["camera"]["readout_time"] = topic_camera_config.readout_time
    confdict["camera"]["shutter_time"] = topic_camera_config.shutter_time
    confdict["camera"]["filter_change_time"] = topic_camera_config.filter_change_time
    confdict["camera"]["filter_max_changes_burst_num"] = \
        topic_camera_config.filter_max_changes_burst_num
    confdict["camera"]["filter_max_changes_burst_time"] = \
        topic_camera_config.filter_max_changes_burst_time
    confdict["camera"]["filter_max_changes_avg_num"] = \
        topic_camera_config.filter_max_changes_avg_num
    confdict["camera"]["filter_max_changes_avg_time"] = \
        topic_camera_config.filter_max_changes_avg_time
    if topic_camera_config.filter_removable != "":
        confdict["camera"]["filter_removable"] = topic_camera_config.filter_removable
    else:
        confdict["camera"]["filter_removable"] = []

    if topic_camera_config.filter_mounted != "":
        confdict["camera"]["filter_mounted"] = topic_camera_config.filter_mounted
    else:
        confdict["camera"]["filter_mounted"] = []

    if topic_camera_config.filter_unmounted != "":
        confdict["camera"]["filter_unmounted"] = topic_camera_config.filter_unmounted
    else:
        confdict["camera"]["filter_unmounted"] = []

    return confdict


def make_rotator_config(rotator_config):

    topic_rotator_config = rotator_config

    confdict = {}
    confdict["rotator"] = {}
    confdict["rotator"]["minpos"] = topic_rotator_config.minpos
    confdict["rotator"]["maxpos"] = topic_rotator_config.maxpos
    confdict["rotator"]["maxspeed"] = topic_rotator_config.maxspeed
    confdict["rotator"]["accel"] = topic_rotator_config.accel
    confdict["rotator"]["decel"] = topic_rotator_config.decel
    confdict["rotator"]["filter_change_pos"] = topic_rotator_config.filter_change_pos
    confdict["rotator"]["follow_sky"] = topic_rotator_config.follow_sky
    confdict["rotator"]["resume_angle"] = topic_rotator_config.resume_angle

    return confdict


def make_dome_config(dome_config):
    topic_dome_config = dome_config

    confdict = {}
    confdict["dome"] = {}
    confdict["dome"]["altitude_maxspeed"] = topic_dome_config.altitude_maxspeed
    confdict["dome"]["altitude_accel"] = topic_dome_config.altitude_accel
    confdict["dome"]["altitude_decel"] = topic_dome_config.altitude_decel
    confdict["dome"]["azimuth_maxspeed"] = topic_dome_config.azimuth_maxspeed
    confdict["dome"]["azimuth_accel"] = topic_dome_config.azimuth_accel
    confdict["dome"]["azimuth_decel"] = topic_dome_config.azimuth_decel
    confdict["dome"]["settle_time"] = topic_dome_config.settle_time

    return confdict


def make_telescope_config(tel_config):

    topic_telescope_config = tel_config

    confdict = {}
    confdict["telescope"] = {}
    confdict["telescope"]["altitude_minpos"] = topic_telescope_config.altitude_minpos
    confdict["telescope"]["altitude_maxpos"] = topic_telescope_config.altitude_maxpos
    confdict["telescope"]["azimuth_minpos"] = topic_telescope_config.azimuth_minpos
    confdict["telescope"]["azimuth_maxpos"] = topic_telescope_config.azimuth_maxpos
    confdict["telescope"]["altitude_maxspeed"] = topic_telescope_config.altitude_maxspeed
    confdict["telescope"]["altitude_accel"] = topic_telescope_config.altitude_accel
    confdict["telescope"]["altitude_decel"] = topic_telescope_config.altitude_decel
    confdict["telescope"]["azimuth_maxspeed"] = topic_telescope_config.azimuth_maxspeed
    confdict["telescope"]["azimuth_accel"] = topic_telescope_config.azimuth_accel
    confdict["telescope"]["azimuth_decel"] = topic_telescope_config.azimuth_decel
    confdict["telescope"]["altitude_minpos"] = topic_telescope_config.altitude_minpos
    confdict["telescope"]["altitude_minpos"] = topic_telescope_config.altitude_minpos
    confdict["telescope"]["altitude_minpos"] = topic_telescope_config.altitude_minpos
    confdict["telescope"]["settle_time"] = topic_telescope_config.settle_time

    return confdict


def make_location_config(location_config):
    topic_location_config = location_config

    confdict = {}
    confdict["obs_site"] = {}
    confdict["obs_site"]["name"] = topic_location_config.name
    confdict["obs_site"]["latitude"] = topic_location_config.latitude
    confdict["obs_site"]["longitude"] = topic_location_config.longitude
    confdict["obs_site"]["height"] = topic_location_config.height

    return confdict


def make_driver_config(sched_driver):
    topic_driver_config = sched_driver

    confdict = {}
    confdict["ranking"] = {}
    confdict["ranking"]["coadd_values"] = topic_driver_config.coadd_values
    confdict["ranking"]["time_balancing"] = topic_driver_config.time_balancing
    confdict["ranking"]["timecost_time_max"] = topic_driver_config.timecost_time_max
    confdict["ranking"]["timecost_time_ref"] = topic_driver_config.timecost_time_ref
    confdict["ranking"]["timecost_cost_ref"] = topic_driver_config.timecost_cost_ref
    confdict["ranking"]["timecost_weight"] = topic_driver_config.timecost_weight
    confdict["ranking"]["filtercost_weight"] = topic_driver_config.filtercost_weight
    confdict["ranking"]["propboost_weight"] = topic_driver_config.propboost_weight
    confdict["constraints"] = {}
    confdict["constraints"]["night_boundary"] = topic_driver_config.night_boundary
    confdict["constraints"]["ignore_sky_brightness"] = topic_driver_config.ignore_sky_brightness
    confdict["constraints"]["ignore_airmass"] = topic_driver_config.ignore_airmass
    confdict["constraints"]["ignore_clouds"] = topic_driver_config.ignore_clouds
    confdict["constraints"]["ignore_seeing"] = topic_driver_config.ignore_seeing
    confdict["darktime"] = {}
    confdict["darktime"]["new_moon_phase_threshold"] = topic_driver_config.new_moon_phase_threshold

    return confdict


def make_area_proposal_dict(config_dict):
    topic_areapropconf = scheduler_generalPropConfigC()
    config_dict.set_topic(topic_areapropconf)
    confdict = dict()

    confdict["sky_nightly_bounds"] = {}
    confdict["sky_nightly_bounds"]["twilight_boundary"] = topic_areapropconf.twilight_boundary
    confdict["sky_nightly_bounds"]["delta_lst"] = topic_areapropconf.delta_lst

    confdict["constraints"] = {}
    confdict["constraints"]["max_airmass"] = topic_areapropconf.max_airmass
    confdict["constraints"]["max_cloud"] = topic_areapropconf.max_cloud
    confdict["constraints"]["min_distance_moon"] = topic_areapropconf.min_distance_moon
    confdict["constraints"]["exclude_planets"] = topic_areapropconf.exclude_planets

    confdict["sky_region"] = {}
    num_region_selections = topic_areapropconf.num_region_selections
    region_types = topic_areapropconf.region_types
    if region_types == "":
        region_types_list = []
    else:
        region_types_list = region_types.split(",")

    region_list = []
    for k in range(num_region_selections):
        region_minimum = topic_areapropconf.region_minimums[k]
        region_maximum = topic_areapropconf.region_maximums[k]
        region_bound = topic_areapropconf.region_bounds[k]

        region = (region_types_list[k], region_minimum, region_maximum, region_bound)
        region_list.append(region)
    region_combiners = topic_areapropconf.region_combiners
    if region_combiners == "":
        region_combiners_list = []
    else:
        region_combiners_list = region_combiners.split(",")
    confdict["sky_region"]["cuts"] = region_list
    confdict["sky_region"]["combiners"] = region_combiners_list

    num_time_ranges = topic_areapropconf.num_time_ranges
    if num_time_ranges:
        time_range_list = []
        selection_mappings = []
        selection_index = 0
        for k in range(num_time_ranges):
            time_range_list.append((topic_areapropconf.time_range_starts[k],
                                    topic_areapropconf.time_range_ends[k]))
            num_selection_mappings = topic_areapropconf.num_selection_mappings[k]
            selection_map = []
            for m in range(num_selection_mappings):
                selection_map.append(topic_areapropconf.selection_mappings[selection_index])
                selection_index += 1
            selection_mappings.append(selection_map)

        confdict["sky_region"]["time_ranges"] = time_range_list
        confdict["sky_region"]["selection_mappings"] = selection_mappings

    confdict["sky_exclusions"] = {}
    num_exclusion_selections = topic_areapropconf.num_exclusion_selections
    exclusion_types = topic_areapropconf.exclusion_types
    if exclusion_types == "":
        exclusion_types_list = []
    else:
        exclusion_types_list = exclusion_types.split(",")
    exclusion_list = []
    for k in range(num_exclusion_selections):
        exclusion_minimum = topic_areapropconf.exclusion_minimums[k]
        exclusion_maximum = topic_areapropconf.exclusion_maximums[k]
        exclusion_bound = topic_areapropconf.exclusion_bounds[k]

        exclusion = (exclusion_types_list[k], exclusion_minimum,
                     exclusion_maximum, exclusion_bound)
        exclusion_list.append(exclusion)

    confdict["sky_exclusions"]["cuts"] = exclusion_list
    dec_window = topic_areapropconf.dec_window
    confdict["sky_exclusions"]["dec_window"] = dec_window

    num_filters = topic_areapropconf.num_filters
    filter_names = topic_areapropconf.filter_names
    filter_list = filter_names.split(",")
    exp_index = 0
    for k in range(num_filters):
        filter = filter_list[k]
        filter_section = "filter_%s" % filter
        confdict[filter_section] = {}
        confdict[filter_section]["visits"] = topic_areapropconf.num_visits[k]
        confdict[filter_section]["min_brig"] = \
            topic_areapropconf.bright_limit[k]
        confdict[filter_section]["max_brig"] = topic_areapropconf.dark_limit[k]
        confdict[filter_section]["max_seeing"] = topic_areapropconf.max_seeing[k]
        num_exp = topic_areapropconf.num_filter_exposures[k]
        exp_times_list = []
        for n in range(num_exp):
            exp_times_list.append(topic_areapropconf.exposures[exp_index])
            exp_index += 1
        confdict[filter_section]["exp_times"] = exp_times_list
        confdict[filter_section]["num_grouped_visits"] = topic_areapropconf.num_grouped_visits[k]

    confdict["scheduling"] = {}
    max_num_targets = topic_areapropconf.max_num_targets
    accept_serendipity = topic_areapropconf.accept_serendipity
    accept_consecutive_visits = topic_areapropconf.accept_consecutive_visits
    confdict["scheduling"]["max_num_targets"] = max_num_targets
    confdict["scheduling"]["accept_serendipity"] = accept_serendipity
    confdict["scheduling"]["accept_consecutive_visits"] = accept_consecutive_visits
    confdict["scheduling"]["airmass_bonus"] = topic_areapropconf.airmass_bonus
    confdict["scheduling"]["hour_angle_bonus"] = topic_areapropconf.hour_angle_bonus
    confdict["scheduling"]["hour_angle_max"] = topic_areapropconf.hour_angle_max

    confdict["scheduling"]["restrict_grouped_visits"] = topic_areapropconf.restrict_grouped_visits
    confdict["scheduling"]["time_interval"] = topic_areapropconf.time_interval
    confdict["scheduling"]["time_window_start"] = topic_areapropconf.time_window_start
    confdict["scheduling"]["time_window_max"] = topic_areapropconf.time_window_max
    confdict["scheduling"]["time_window_end"] = topic_areapropconf.time_window_end
    confdict["scheduling"]["time_weight"] = topic_areapropconf.time_weight

    # prop_dict = {'sky_region': {},
    #              'sky_exclusions': {},
    #              'sky_nightly_bounds': {},
    #              'constraints': {},
    #              'scheduling': {},
    #              }
    # for key in prop_dict.keys():
    #     prop_dict[key] = configdict
    #
    # prop_dict['constraints'] = configdict.sky_constraints.toDict()
    # prop_dict['scheduling'] = configdict.scheduling.toDict()
    # prop_dict['sky_nightly_bounds'] = configdict.sky_nightly_bounds.toDict()
    # prop_dict['sky_exclusions'] = configdict.sky_exclusion.toDict()
    #
    # if 'sky_region' in configdict.keys():
    #     prop_dict['sky_region'] = configdict.sky_region.toDict()
    #
    # else:
    #     prop_dict['sky_region'] = {}

    return confdict


def make_seq_proposal_dict(config_dict):
    topic_seqpropconf = scheduler_sequencePropConfigC()
    config_dict.set_topic(topic_seqpropconf)

    confdict = {}

    confdict["sky_nightly_bounds"] = {}
    confdict["sky_nightly_bounds"]["twilight_boundary"] = topic_seqpropconf.twilight_boundary
    confdict["sky_nightly_bounds"]["delta_lst"] = topic_seqpropconf.delta_lst

    confdict["constraints"] = {}
    confdict["constraints"]["max_airmass"] = topic_seqpropconf.max_airmass
    confdict["constraints"]["max_cloud"] = topic_seqpropconf.max_cloud
    confdict["constraints"]["min_distance_moon"] = topic_seqpropconf.min_distance_moon
    confdict["constraints"]["exclude_planets"] = topic_seqpropconf.exclude_planets

    confdict["sky_region"] = {}
    num_user_regions = topic_seqpropconf.num_user_regions
    region_list = []
    for k in range(num_user_regions):
        region_list.append(topic_seqpropconf.user_region_ids[k])

    confdict["sky_region"]["user_regions"] = region_list

    confdict["sky_exclusions"] = {}
    confdict["sky_exclusions"]["dec_window"] = topic_seqpropconf.dec_window

    num_sub_sequences = topic_seqpropconf.num_sub_sequences
    if num_sub_sequences:
        confdict["subsequences"] = {}
        sub_sequence_names = topic_seqpropconf.sub_sequence_names.split(',')
        confdict["subsequences"]["names"] = sub_sequence_names
        sub_sequence_filters = topic_seqpropconf.sub_sequence_filters.split(',')
        sub_sequence_visits_per_filter = topic_seqpropconf.num_sub_sequence_filter_visits
        index = 0
        for k, sname in enumerate(sub_sequence_names):
            sub_seq_section = "subseq_{}".format(sname)
            confdict[sub_seq_section] = {}
            num_sub_sequence_filters = topic_seqpropconf.num_sub_sequence_filters[k]
            confdict[sub_seq_section]["filters"] = \
                sub_sequence_filters[index:index + num_sub_sequence_filters]
            confdict[sub_seq_section]["visits_per_filter"] = \
                sub_sequence_visits_per_filter[index:index + num_sub_sequence_filters]
            index += num_sub_sequence_filters
            confdict[sub_seq_section]["num_events"] = topic_seqpropconf.num_sub_sequence_events[k]
            confdict[sub_seq_section]["num_max_missed"] = topic_seqpropconf.num_sub_sequence_max_missed[k]
            confdict[sub_seq_section]["time_interval"] = topic_seqpropconf.sub_sequence_time_intervals[k]
            confdict[sub_seq_section]["time_window_start"] = \
                topic_seqpropconf.sub_sequence_time_window_starts[k]
            confdict[sub_seq_section]["time_window_max"] = \
                topic_seqpropconf.sub_sequence_time_window_maximums[k]
            confdict[sub_seq_section]["time_window_end"] = \
                topic_seqpropconf.sub_sequence_time_window_ends[k]
            confdict[sub_seq_section]["time_weight"] = topic_seqpropconf.sub_sequence_time_weights[k]

    num_master_sub_sequences = topic_seqpropconf.num_master_sub_sequences
    if num_master_sub_sequences:
        confdict["master_subsequences"] = {}
        master_sub_sequence_names = topic_seqpropconf.master_sub_sequence_names.split(',')

        confdict["master_subsequences"]["names"] = master_sub_sequence_names
        confdict["master_subsequences"]["num_nested"] = \
            topic_seqpropconf.num_nested_sub_sequences[:num_master_sub_sequences]
        nested_sub_sequence_names = topic_seqpropconf.nested_sub_sequence_names.split(',')
        nested_sub_sequence_filters = topic_seqpropconf.nested_sub_sequence_filters.split(',')
        index = 0
        findex = 0
        for k, mname in enumerate(master_sub_sequence_names):
            msub_seq_section = "msubseq_{}".format(mname)
            confdict[msub_seq_section] = {}
            num_nested_sub_sequences = topic_seqpropconf.num_nested_sub_sequences[k]
            confdict[msub_seq_section]["nested_names"] = \
                nested_sub_sequence_names[index:index + num_nested_sub_sequences]
            confdict[msub_seq_section]["num_events"] = topic_seqpropconf.num_master_sub_sequence_events[k]
            confdict[msub_seq_section]["num_max_missed"] = \
                topic_seqpropconf.num_master_sub_sequence_max_missed[k]
            confdict[msub_seq_section]["time_interval"] = \
                topic_seqpropconf.master_sub_sequence_time_intervals[k]
            confdict[msub_seq_section]["time_window_start"] = \
                topic_seqpropconf.master_sub_sequence_time_window_starts[k]
            confdict[msub_seq_section]["time_window_max"] = \
                topic_seqpropconf.master_sub_sequence_time_window_maximums[k]
            confdict[msub_seq_section]["time_window_end"] = \
                topic_seqpropconf.master_sub_sequence_time_window_ends[k]
            confdict[msub_seq_section]["time_weight"] = \
                topic_seqpropconf.master_sub_sequence_time_weights[k]

            for l, nname in enumerate(confdict[msub_seq_section]["nested_names"]):
                nindex = index + l
                nsub_seq_section = "nsubseq_{}".format(nname)
                confdict[nsub_seq_section] = {}
                num_nested_sub_sequence_filters = \
                    topic_seqpropconf.num_nested_sub_sequence_filters[nindex]
                last_index = findex + num_nested_sub_sequence_filters
                confdict[nsub_seq_section]["filters"] = nested_sub_sequence_filters[findex:last_index]
                confdict[nsub_seq_section]["visits_per_filter"] = \
                    topic_seqpropconf.num_nested_sub_sequence_filter_visits[findex:last_index]
                findex += num_nested_sub_sequence_filters
                confdict[nsub_seq_section]["num_events"] = \
                    topic_seqpropconf.num_nested_sub_sequence_events[nindex]
                confdict[nsub_seq_section]["num_max_missed"] = \
                    topic_seqpropconf.num_nested_sub_sequence_max_missed[nindex]
                confdict[nsub_seq_section]["time_interval"] = \
                    topic_seqpropconf.nested_sub_sequence_time_intervals[nindex]
                confdict[nsub_seq_section]["time_window_start"] = \
                    topic_seqpropconf.nested_sub_sequence_time_window_starts[nindex]
                confdict[nsub_seq_section]["time_window_max"] = \
                    topic_seqpropconf.nested_sub_sequence_time_window_maximums[nindex]
                confdict[nsub_seq_section]["time_window_end"] = \
                    topic_seqpropconf.nested_sub_sequence_time_window_ends[nindex]
                confdict[nsub_seq_section]["time_weight"] = \
                    topic_seqpropconf.nested_sub_sequence_time_weights[nindex]

            index += num_nested_sub_sequences

    num_filters = topic_seqpropconf.num_filters
    filter_names = topic_seqpropconf.filter_names
    filter_list = filter_names.split(",")
    exp_index = 0
    for k in range(num_filters):
        filter_section = "filter_%s" % filter_list[k]
        confdict[filter_section] = {}
        confdict[filter_section]["min_brig"] = \
            topic_seqpropconf.bright_limit[k]
        confdict[filter_section]["max_brig"] = topic_seqpropconf.dark_limit[k]
        confdict[filter_section]["max_seeing"] = topic_seqpropconf.max_seeing[k]
        num_exp = topic_seqpropconf.num_filter_exposures[k]
        exp_times_list = []
        for n in range(num_exp):
            exp_times_list.append(topic_seqpropconf.exposures[exp_index])
            exp_index += 1
        confdict[filter_section]["exp_times"] = exp_times_list

    confdict["scheduling"] = {}
    max_num_targets = topic_seqpropconf.max_num_targets
    accept_serendipity = topic_seqpropconf.accept_serendipity
    accept_consecutive_visits = topic_seqpropconf.accept_consecutive_visits
    confdict["scheduling"]["max_num_targets"] = max_num_targets
    confdict["scheduling"]["accept_serendipity"] = accept_serendipity
    confdict["scheduling"]["accept_consecutive_visits"] = accept_consecutive_visits
    confdict["scheduling"]["restart_lost_sequences"] = topic_seqpropconf.restart_lost_sequences
    confdict["scheduling"]["restart_complete_sequences"] = topic_seqpropconf.restart_complete_sequences
    confdict["scheduling"]["max_visits_goal"] = topic_seqpropconf.max_visits_goal
    confdict["scheduling"]["airmass_bonus"] = topic_seqpropconf.airmass_bonus
    confdict["scheduling"]["hour_angle_bonus"] = topic_seqpropconf.hour_angle_bonus
    confdict["scheduling"]["hour_angle_max"] = topic_seqpropconf.hour_angle_max

    return confdict

def main(args):
    log_pid = None
    sched_pid = None

    try:
        db = SocsDatabase(sqlite_save_path=args.sqlite_save_dir,
                          session_id_start=args.session_id_start,
                          sqlite_session_save_path=args.sqlite_session_save_dir)

        session_id = db.new_session(args.startup_comment)

        log_file = generate_logfile_path(args.log_path, session_id)
        console_detail, file_detail = set_log_levels(args.verbose)

        # logging.basicConfig(level=LoggingLevel.EXTENSIVE.value,
        #                     format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')
        logging.basicConfig(level=DETAIL_LEVEL[console_detail],
                            format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")

        # Need time for the central logger to startup to catch all the log messages.
        # time.sleep(5)

        tracking = Tracking(session_id, args.session_code, args.startup_comment)
        if args.track_session:
            if args.tracking_db is not None:
                tracking.opsim_tracking_url = args.tracking_db
            tracking.track_session()

        formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
        handler = logging.FileHandler(log_file)
        handler.setFormatter(formatter)
        handler.setLevel(logging.NOTSET)
        logging.getLogger('').addHandler(handler)

        logger = logging.getLogger("opsim4")

        start_time = datetime.now()

        configuration = SimulationConfig()
        configuration.load(args.config)
        configuration.load_proposals()
        logger.info("{} proposals active.".format(configuration.num_proposals))
        configuration.validate()

        sim = SimulatorNoDDS(args, configuration, db, Driver())
        sim.initialize()
        sim.driver.configure_duration(sim.conf.survey.full_duration)
        logger.info("run: rx scheduler config survey_duration=%.1f" % (sim.conf.survey.full_duration))

        config_dict = make_driver_config(sim.conf.sched_driver)
        sim.driver.configure(config_dict)
        logger.info("run: rx driver config=%s" % config_dict)

        config_dict = make_location_config(sim.conf.observing_site)
        sim.driver.configure_location(config_dict)
        logger.info("run: rx site config=%s" % (config_dict))

        config_dict = make_telescope_config(sim.conf.observatory.telescope)
        sim.driver.configure_telescope(config_dict)
        logger.info("run: rx telescope config=%s" % (config_dict))

        config_dict = make_dome_config(sim.conf.observatory.dome)
        sim.driver.configure_dome(config_dict)
        logger.info("run: rx dome config=%s" % (config_dict))

        config_dict = make_rotator_config(sim.conf.observatory.rotator)
        sim.driver.configure_rotator(config_dict)
        logger.info("run: rx rotator config=%s" % (config_dict))

        config_dict = make_camera_config(sim.conf.observatory.camera)
        sim.driver.configure_camera(config_dict)
        logger.info("run: rx camera config=%s" % (config_dict))

        config_dict = make_slew_config(sim.conf.observatory.slew)
        sim.driver.configure_slew(config_dict)
        logger.info("run: rx slew config=%s" % (config_dict))

        config_dict = make_optics_config(sim.conf.observatory.optics_loop_corr)
        sim.driver.configure_optics(config_dict)
        logger.info("run: rx optics config=%s" % (config_dict))

        config_dict = make_park_config(sim.conf.observatory.park)
        sim.driver.configure_park(config_dict)
        logger.info("run: rx park config=%s" % (config_dict))

        # Configure general proposals
        num_proposals = 1
        for prop_name in sim.conf.science.general_props.keys():
            config_dict = make_area_proposal_dict(sim.conf.science.general_props[prop_name])
            logger.info("run: rx area prop id=%i name=%s config=%s" % (num_proposals, prop_name,
                                                                        config_dict))
            sim.driver.create_area_proposal(num_proposals,
                                            prop_name,
                                            config_dict)
            num_proposals += 1

        for prop_name in sim.conf.science.sequence_props.keys():
            config_dict = make_seq_proposal_dict(sim.conf.science.sequence_props[prop_name])
            logger.info("run: rx seq prop id=%i name=%s config=%s" % (num_proposals, prop_name,
                                                                        config_dict))
            sim.driver.create_sequence_proposal(num_proposals,
                                                prop_name,
                                                config_dict)
            num_proposals += 1

        # logger.info(sim.conf.science.general_props.keys())

        try:
            sim.run()
        except BaseException:
            if not sim.db.data_empty:
                sim.db.write()
            sim.finalize()
            raise

        sim.finalize()

        if args.save_config:
            config_dir = "config_{}".format(session_id)
            args.config_save_path = expand_path(os.path.join(args.config_save_path, config_dir))
            if not os.path.exists(args.config_save_path):
                os.makedirs(args.config_save_path)
            configuration.save(args.config_save_path)
            logger.info("Finished saving survey configuration")

        end_time = datetime.now()
        run_time = (end_time - start_time).total_seconds()
        logger.info("Total running time = {:.2f} seconds".format(run_time))
        if args.track_session:
            tracking.update_session("Simulation finished successfully in {:.2f} seconds".format(run_time))

    except BaseException as err:
        try:
            logger.exception("An exception was thrown in SOCS!")
            if args.track_session:
                tracking.update_session("Simulation was not completed correctly.")
        except UnboundLocalError:
            # Had issue before logger got setup.
            print(err.message)
            print(err.statement)

    finally:
        try:
            logger.info("Waiting for Scheduler to finish.")
            # stop_programs(log_pid, sched_pid, logger)
        except UnboundLocalError:
            # Had issue before logger got setup, do nothing here since nothing got started.
            pass


if __name__ == "__main__":
    parser = create_parser()
    args = parser.parse_args()
    # Handling weird issue with the startup comment argument.
    if isinstance(args.startup_comment, list):
        args.startup_comment = " ".join(args.startup_comment)

    # Apply program configuration file defaults if present.
    prog_conf = read_file_config()
    if prog_conf is not None:
        apply_file_config(prog_conf, args)

    if args.profile:
        import cProfile
        cProfile.run("main(args)", "socs_prof_{}.dat".format(datetime.now().strftime("%Y-%m-%d_%H:%M:%S")))
    else:
        main(args)
